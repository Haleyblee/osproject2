#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

// Fixed filename as per project requirements
const string INPUT_FILE = "25S_COP4610_Project2_InputFile_s";

// Function to read input from file
void readInputFile(int &processSize, int &pageSize, vector<int> &pageTable, int &logicalAddress) {
    ifstream file(INPUT_FILE);
    
    if (!file) {
        cerr << "Error: Unable to open " << INPUT_FILE << ". Ensure the file exists and is named correctly." << endl;
        exit(1);
    }

    // Read process size and page size
   file >> hex >> numLocationSize >> numLocationsOnPage;

    // Calculate the number of pages
   int totalPages = ceil((double)numLocationSize / numLocationsOnPage);
    cout << "Number of locations in program: 0x" << hex << numLocationSize 
     << " Number of locations per page: 0x" << hex << numLocationsOnPage << endl;
    cout << "Number of pages: " << totalPages << " Page numbers: 0 - " << (totalPages - 1) << endl;

    // Read the page table (frame assignments)
    cout << "Reading the frame numbers for the PMT array..." << endl;
    int frameNumber;
    for (int i = 0; i < totalPages; ++i) {
        file >> hex >> frameNumber;
        numOfPages.push_back(frameNumber);
    }
    // Display the Page Map Table (PMT)
    cout << "The PMT is:\nPage#   Frame#" << endl;
    cout << "--------------------------" << endl;
    int frameNumber;
    for (size_t i = 0; i < numOfPages.size(); ++i) {
        cout << "  " << i << "     0x" << hex << numOfPages[i] << endl;
    }

    // Read the logical address
    file >> hex >> logicalMemoryLocation;
    file.close();
}

// Function to compute and print the physical address mapping
void computePhysicalAddress(int numLocationSize, int numLocationsOnPage, const vector<int> &numOfPages, int logicalMemoryLocation) {
    cout << "\nNow reading the logical memory location of interest..." << endl;
    cout << "The logical memory location of interest: 0x" << hex << logicalMemoryLocation << endl;

    // Calculate page number and offset
    int pageNumber = logicalMemoryLocation / numLocationsOnPage;
    int offset = logicalMemoryLocation % numLocationsOnPage;

    // Validate if pageNumber exists in pageTable
    if (pageNumber >= (int)numOfPages.size()) {
        cerr << "Error: Logical address out of range!" << endl;
        return;
    }

    // Retrieve the frame number from PMT
    int frameNumber = numOfPages[pageNumber];

    // Calculate absolute memory address
   int physicalAddress = (frameNumber * numLocationsOnPage) + offset;

    // Print results
    cout << "Logical address 0x" << hex << logicalMemoryLocation << " belongs to page: " << pageNumber << endl;
    cout << "Frame number: 0x" << hex << frameNumber << endl;
    cout << "Offset: 0x" << hex << offset << endl;
    cout << "Physical memory location: 0x" << hex << physicalAddress << endl;
}

int main() {
    // Input parameters
    int numLocationSize, numLocationsOnPage, logicalMemoryLocation;
    vector<int> numOfPages;

    // Read input file
    readInputFile(numLocationSize, numLocationsOnPage, numOfPages, logicalMemoryLocation);

    // Compute and display the memory mapping
    computePhysicalAddress(numLocationSize, numLocationsOnPage, numOfPages, logicalMemoryLocation);

    return 0;
}
